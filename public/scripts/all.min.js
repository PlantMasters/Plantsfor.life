'use strict';

angular.module('plantMasters', ['ui.router']).config(function ($urlRouterProvider, $stateProvider) {
    $stateProvider.state('main', {
        url: '/',
        views: {
            'search': {
                templateUrl: 'views/main.html',
                controller: 'mainCtrl'
            },
            'results': {
                templateUrl: 'views/results.html',
                controller: 'resultsCtrl'
            }
        }
    });

    $urlRouterProvider.otherwise('/');
});
'use strict';

angular.module('plantMasters').factory('Identity', function () {
  var currentUser;
  var test = 'THIS IS A TEST';
  if (!!$window.bootstrappedUserObject) {
    currentUser = new User();
    angular.extend(currentUser, $window.bootstrappedUserObject);
  }
  return {
    currentUser: currentUser,
    isAuthenticated: function isAuthenticated() {
      return !!this.currentUser;
    },
    isAuthorized: function isAuthorized(role) {
      return !!this.currentUser && this.currentUser.roles.indexOf(role) > -1;
    }
  };
});
'use strict';

angular.module('plantMasters').controller('NavBarLoginCtrl', function ($scope, $http, Identity, Notifier, Auth, $location) {
  $scope.identity = Identity;
  console.log("someone loves me?");
  $scope.signin = function (username, password) {
    Auth.authenticateUser(username, password).then(function (success) {
      if (success) {
        Notifier.notify('You have successfully signed in!');
      } else {
        Notifier.notify('Username/Password combination incorrect');
      }
    });
  };

  $scope.signout = function () {
    Auth.logoutUser().then(function () {
      $scope.username = "";
      $scope.password = "";
      Notifier.notify('You have successfully logged out!');
      $location.path('/');
    });
  };
  $http.get('/bootstrappedUser').success(function (data, status, headers, config) {
    $scope.bootstrappedUser = data;
  });
});
'use strict';

angular.module('plantMasters').value('Toastr', toastr);

angular.module('plantMasters').factory('Notifier', function (Toastr) {
  return {
    notify: function notify(msg) {
      Toastr.success(msg);
      console.log(msg);
    },
    error: function error(msg) {
      Toastr.error(msg);
    }
  };
});
'use strict';

angular.module('plantMasters').controller('mainCtrl', function ($scope, $window, mainSearchService) {

    $window.navigator.geolocation.getCurrentPosition(function (position) {
        var location = [position.coords.latitude, position.coords.longitude];

        $scope.$apply(function () {
            $scope.coordinates = location;
        });
    });

    $scope.medicalUses = ["Band Aids", "Blood Thinner", "Blood Clotter", "Anti-Inflammatory", "Fever Reducer"];
    $scope.edibleUses = ["Preservative", "Fiber", "Vitamin C", "Great in Pies"];
    $scope.otherUses = ["Insecticide", "Oil", "Paint", "Wood", "Microscope", "Waterproofing"];
    $scope.zones = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13];
    $scope.typedUse;
    $scope.searchInputUse = function () {
        console.log($scope.typedUse);
        //send typed use to backend and return plants with that use;
    };
    $scope.medicalShow = true;
    $scope.edibleShow = true;
    $scope.otherShow = true;
    $scope.hardinessShow = true;

    //zone array to send with uses to the backend and retrieve plants
    $scope.currentHardinessZone = mainSearchService.currentHardinessZones;
    //function that manages the zones array and then invokes a function that will send zones and uses to backend
    $scope.hardinessZone = function (aNum) {
        mainSearchService.manageCurrentZones(aNum);
    };
    //function that returns true or false to toggle green color on front end
    $scope.zoneIsActive = function (zone) {
        var foundUse = false;
        for (var i = 0; i < $scope.currentHardinessZone.length; i++) {
            if ($scope.currentHardinessZone[i] === zone) {
                return true;
            }
        }
        if (!foundUse) {
            return false;
        }
    };

    //medical uses array
    $scope.medicalSelected = mainSearchService.medicalSelected;
    //function that manages medical uses array and then invokes a function that will send zones and uses to backend
    $scope.medicalSelect = function (use) {
        mainSearchService.manageMedicalSelected(use);
    };
    //function that returns true or false to toggle green color on front end
    $scope.medicalIsActive = function (use) {
        var foundUse = false;
        for (var i = 0; i < $scope.medicalSelected.length; i++) {
            if ($scope.medicalSelected[i] === use) {
                return true;
            }
        }
        if (!foundUse) {
            return false;
        }
    };

    //edible uses array
    $scope.edibleSelected = mainSearchService.edibleSelected;
    //function that manages edible uses array and then invokes a function that will send zones and uses to backend
    $scope.edibleSelect = function (use) {
        mainSearchService.manageEdibleSelect(use);
    };
    //function that returns true or false to toggle green color on front end
    $scope.edibleIsActive = function (use) {
        var foundUse = false;
        for (var i = 0; i < $scope.edibleSelected.length; i++) {
            if ($scope.edibleSelected[i] === use) {
                return true;
            }
        }
        if (!foundUse) {
            return false;
        }
    };

    //other uses array
    $scope.otherSelected = mainSearchService.otherSelected;
    //function that manages other uses array and then invokes a function that will send zones and uses to backend
    $scope.otherSelect = function (use) {
        mainSearchService.manageOtherSelect(use);
    };
    //function that returns true or false to toggle green color on front end
    $scope.otherIsActive = function (use) {
        var foundUse = false;
        for (var i = 0; i < $scope.otherSelected.length; i++) {
            if ($scope.otherSelected[i] === use) {
                return true;
            }
        }
        if (!foundUse) {
            return false;
        }
    };
});
'use strict';

angular.module('plantMasters').controller('resultsCtrl', function ($scope, mainSearchService, $rootScope) {
    //$scope.plants = mainSearchService.plants;
    console.log('ROOT SCOPE');
    console.log($rootScope.plants);
    $rootScope.$watch('plants', function () {
        console.log('WATCHING');
        console.log($rootScope.plants);
    });
});
"use strict";

angular.module('plantMasters').service('MainSvc', function ($http, $q) {
  //
  //   let coords;
  //
  // this.submitZip = function(request) {
  //
  //   $http.post("/", request)
  //   .success(function(result) {
  //     console.log(result);
  //     coords = result;
  //   }).error(function() {
  //     console.log('Error!');
  //   })
  // }

});
'use strict';

angular.module('plantMasters').service('mainSearchService', function ($http, $q, $rootScope) {
    this.currentHardinessZones = ['1', '2'];
    $rootScope.plants = this.currentHardinessZones;
    this.manageCurrentZones = function (aNum) {
        var found = false;
        for (var i = 0; i < this.currentHardinessZones.length; i++) {
            if (this.currentHardinessZones[i] === aNum) {
                found = true;
                this.currentHardinessZones.splice(i, 1);
            }
        }
        if (!found) {
            this.currentHardinessZones.push(aNum);
        }
        //invoke function here
    };
    this.medicalSelected = [];
    this.manageMedicalSelected = function (use) {
        var found = false;
        for (var i = 0; i < this.medicalSelected.length; i++) {
            if (this.medicalSelected[i] === use) {
                found = true;
                this.medicalSelected.splice(i, 1);
            }
        }
        if (!found) {
            this.medicalSelected.push(use);
        }
    };
    this.edibleSelected = [];
    this.manageEdibleSelect = function (use) {
        var found = false;
        for (var i = 0; i < this.edibleSelected.length; i++) {
            if (this.edibleSelected[i] === use) {
                found = true;
                this.edibleSelected.splice(i, 1);
            }
        }
        if (!found) {
            this.edibleSelected.push(use);
        }
    };
    this.otherSelected = [];
    this.manageOtherSelect = function (use) {
        var found = false;
        for (var i = 0; i < this.otherSelected.length; i++) {
            if (this.otherSelected[i] === use) {
                found = true;
                this.otherSelected.splice(i, 1);
            }
        }
        if (!found) {
            this.otherSelected.push(use);
        }
    };

    //    this.findPlants = function() {
    //        return $http({
    //            method: 'GET',
    //            url: '/findPlants/' +
    //        })
    //    }
});