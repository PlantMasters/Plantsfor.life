'use strict';

angular.module('plantMasters', ['ngResource', 'ui.router']).config(function ($urlRouterProvider, $stateProvider) {
  var routeRoleChecks = {
    user: {
      auth: function auth(Auth) {
        return Auth.authorizeAuthenticatedUserForRoute();
      }
    }
  };
  $stateProvider.state('main', {
    url: '/',
    views: {
      'search': {
        templateUrl: 'views/main.html',
        controller: 'mainCtrl'
      },
      'results': {
        templateUrl: 'views/results.html',
        controller: 'resultsCtrl'
      }
    }
  }).state('signup', {
    url: '/signup',
    templateUrl: 'views/signup.html',
    controller: 'SignupCtrl'
  }).state('profile', {
    url: '/profile',
    templateUrl: 'views/profile.html',
    controller: 'ProfileCtrl',
    resolve: routeRoleChecks.user
  });

  $urlRouterProvider.otherwise('/');
});
'use strict';

angular.module('plantMasters').factory('Auth', function ($http, Identity, $q, User) {
    return {
        authenticateUser: function authenticateUser(username, password) {
            var dfd = $q.defer();
            $http.post('/login', { username: username, password: password }).then(function (response) {
                if (response.data.success) {
                    var user = new User();
                    angular.extend(user, response.data.user);
                    Identity.currentUser = user;
                    dfd.resolve(true);
                } else {
                    dfd.resolve(false);
                }
            });
            return dfd.promise;
        },
        createUser: function createUser(newUserData) {
            var newUser = new User(newUserData);
            var dfd = $q.defer();

            newUser.$save().then(function () {
                Identity.currentUser = newUser;
                dfd.resolve();
            }, function (response) {
                dfd.reject(response.data.reason);
            });
            return dfd.promise;
        },
        updateCurrentUser: function updateCurrentUser(newUserData) {
            var dfd = $q.defer();

            var clone = angular.copy(Identity.currentUser);
            angular.merge(clone, newUserData);
            clone.$update().then(function () {
                Identity.currentUser = clone;
                dfd.resolve();
            }, function (response) {
                dfd.reject(response.data.reason);
            });
            return dfd.promise;
        },
        logoutUser: function logoutUser() {
            var dfd = $q.defer();
            $http.post('/logout', { logout: true }).then(function () {
                Identity.currentUser = undefined;
                dfd.resolve();
            });
            return dfd.promise;
        },
        authorizeCurrentUserForRoute: function authorizeCurrentUserForRoute(role) {
            if (Identity.isAuthorized('admin')) {
                return true;
            } else {
                return $q.reject('not authorized');
            }
        },
        authorizeAuthenticatedUserForRoute: function authorizeAuthenticatedUserForRoute() {
            if (Identity.isAuthenticated()) {
                return true;
            } else {
                return $q.reject('not authorized');
            }
        }
    };
});
'use strict';

angular.module('plantMasters').factory('Identity', function ($http) {
  var currentUser = {};

  var userCall = function userCall() {
    $http.get('/bootstrappedUser').success(function (data, status, headers, config) {
      Object.assign(currentUser, data);
      console.log(data);
    }).catch(function (err) {
      currentUser = undefined;
      console.log("ERROR!!!!");
    });
  };
  userCall();

  return {
    currentUser: currentUser,
    isAuthenticated: function isAuthenticated() {
      return !!this.currentUser;
    },
    isAuthorized: function isAuthorized(role) {
      return !!this.currentUser && this.currentUser.roles.indexOf(role) > -1;
    }
  };
});
'use strict';

angular.module('plantMasters').controller('NavBarLoginCtrl', function ($scope, Identity, mvNotifier, Auth, $location, $window) {
    $scope.identity = Identity;

    $scope.signin = function (username, password) {
        Auth.authenticateUser(username, password).then(function (success) {
            if (success) {
                mvNotifier.notify('You have successfully signed in!');
            } else {
                mvNotifier.error('Username/Password combination incorrect');
            }
        });
    };

    $scope.signout = function () {
        Auth.logoutUser().then(function () {
            $scope.username = "";
            $scope.password = "";
            mvNotifier.notify('You have successfully logged out!');
            $location.path('/');
        });
    };

    if (!!$window.bootstrappedUserObject) {
        $scope.$apply($scope.identity.currentUser);
        currentUser = new User();
        angular.extend(currentUser, $window.bootstrappedUserObject);
    }
});
'use strict';

angular.module('plantMasters').controller('ProfileCtrl', function ($scope, Auth, Identity, mvNotifier) {
  $scope.email = Identity.currentUser.username;
  $scope.fname = Identity.currentUser.firstName;
  $scope.lname = Identity.currentUser.lastName;

  $scope.update = function () {
    var newUserData = {
      username: $scope.email,
      firstName: $scope.fname,
      lastName: $scope.lname

    };
    if ($scope.password && $scope.password.length > 0) {
      newUserData.password = $scope.password;
    }
    Auth.updateCurrentUser(newUserData).then(function () {
      mvNotifier.notify('Your user account has been updated');
    }, function (reason) {
      mvNotifier.error(reason);
    });
  };
});
'use strict';

angular.module('plantMasters').controller('SignupCtrl', function ($scope, User, mvNotifier, $location, Auth) {
  $scope.signup = function () {
    var newUserData = {
      username: $scope.email,
      password: $scope.password,
      firstName: $scope.fname,
      lastName: $scope.lname
    };

    Auth.createUser(newUserData).then(function () {
      mvNotifier.notify('User account created!  Of all our users; you are the most recent!!!');
      $location.path('/');
    }, function (reason) {
      mvNotifier.error(reason);
    });
  };
});
'use strict';

angular.module('plantMasters').factory('User', function ($resource) {
  var UserResource = $resource('/api/users/:id', { id: "@id" }, {
    update: { method: 'PUT', isArray: false }
  });

  UserResource.prototype.isAdmin = function () {
    return this.roles && this.roles.indexOf('admin') > -1;
  };
  return UserResource;
});
'use strict';

angular.module('plantMasters').controller('mainCtrl', function ($scope, $window, mainSearchService) {

    $scope.medicalUses = ["Alternative Medicine", "Bacteria/Viruses/Fungi/Parasites", "Bites/Stings", "Bones", "Bowels/Bladder", "Cancer", "Chest/Lungs", "Ear/Nose/Throat/Eyes", "Fevers", "General Well Being", "Heart/Blood", "Infectious Diseases", "Liver/Kidneys", "Nerves/Muscles", "Other", "Pain Relief", "Sex/Reproduction", "Skin/Hands/Feet", "Stomach", "Wounds/Bruises", "Whole Body"];
    $scope.otherUses = ["Building", "Clothing", "Dyes/Paints/Ink/Paper", "Fertilizers", "Fire/Lighting", "Bathroom", "Garden", "Home", "Kitchen", "Other", "Pesticides", "Woodwork/Crafts"];
    $scope.edibleUses = ["Chocolate", "Coffee", "Coloring", "Condiment", "Curdling", "Drink", "Egg", "Gelatine", "Gum", "Milk", "Oil", "Pectin", "Rutin", "Salt", "Stabilizer", "Sweetener", "Tea"];
    $scope.zones = [1, 2, 3, 4, 5, 6, 7, 8, 9];
    $scope.typedUse = [];
    $scope.searchInputUse = function () {
        console.log($scope.typedUse);
        //send typed use to backend and return plants with that use;
    };
    $scope.medicalShow = true;
    $scope.edibleShow = true;
    $scope.otherShow = true;
    $scope.hardinessShow = true;

    //zone array to send with uses to the backend and retrieve plants
    $scope.currentHardinessZone = mainSearchService.currentHardinessZones;
    //function that manages the zones array and then invokes a function that will send zones and uses to backend
    $scope.hardinessZone = function (aNum) {
        mainSearchService.manageCurrentZones(aNum);
    };
    //function that returns true or false to toggle green color on front end

    $scope.zoneIsActive = function (zone) {
        if ($scope.currentHardinessZone === zone) {
            return true;
        } else {
            return false;
        }
    };

    //medical uses array
    $scope.medicalSelected = mainSearchService.medicalSelected;
    //function that manages medical uses array and then invokes a function that will send zones and uses to backend
    $scope.medicalSelect = function (use) {
        mainSearchService.manageMedicalSelected(use);
    };
    //function that returns true or false to toggle green color on front end
    $scope.medicalIsActive = function (use) {
        var foundUse = false;
        for (var i = 0; i < $scope.medicalSelected.length; i++) {
            if ($scope.medicalSelected[i] === use) {
                return true;
            }
        }
        if (!foundUse) {
            return false;
        }
    };

    //watches medicalSelected array for changes, pushes specific changes
    $scope.$watchCollection('medicalSelected', function (newVal) {
        mainSearchService.addMedicalSpecific();
    }, true);

    //watches otherSelected array for changes, pushes specific changes
    $scope.$watchCollection('otherSelected', function (newVal) {
        mainSearchService.addOtherSpecific();
    }, true);

    //edible uses array
    $scope.edibleSelected = mainSearchService.edibleSelected;
    //function that manages edible uses array and then invokes a function that will send zones and uses to backend
    $scope.edibleSelect = function (use) {
        mainSearchService.manageEdibleSelect(use);
    };
    //function that returns true or false to toggle green color on front end
    $scope.edibleIsActive = function (use) {
        var foundUse = false;
        for (var i = 0; i < $scope.edibleSelected.length; i++) {
            if ($scope.edibleSelected[i] === use) {
                return true;
            }
        }
        if (!foundUse) {
            return false;
        }
    };

    //other uses array
    $scope.otherSelected = mainSearchService.otherSelected;
    //function that manages other uses array and then invokes a function that will send zones and uses to backend
    $scope.otherSelect = function (use) {
        mainSearchService.manageOtherSelect(use);
    };
    //function that returns true or false to toggle green color on front end
    $scope.otherIsActive = function (use) {
        var foundUse = false;
        for (var i = 0; i < $scope.otherSelected.length; i++) {
            if ($scope.otherSelected[i] === use) {
                return true;
            }
        }
        if (!foundUse) {
            return false;
        }
    };
});
'use strict';

angular.module('plantMasters').value('mvToastr', toastr);

angular.module('plantMasters').factory('mvNotifier', function (mvToastr) {
    return {
        notify: function notify(msg) {
            mvToastr.success(msg);
            console.log(msg);
        },
        error: function error(msg) {
            mvToastr.error(msg);
        }
    };
});
'use strict';

angular.module('plantMasters').controller('resultsCtrl', function ($scope, mainSearchService, $rootScope) {
    //$scope.plants = mainSearchService.plants;

    $rootScope.$watch('plants', function () {});
});
"use strict";

angular.module('plantMasters').service('MainSvc', function ($http, $q) {
  //
  //   let coords;
  //
  // this.submitZip = function(request) {
  //
  //   $http.post("/", request)
  //   .success(function(result) {
  //     console.log(result);
  //     coords = result;
  //   }).error(function() {
  //     console.log('Error!');
  //   })
  // }

});
'use strict';

angular.module('plantMasters').service('ResultsSvc', function () {});
'use strict';

angular.module('plantMasters').service('mainSearchService', function ($http, $q, $rootScope) {
  this.currentHardinessZones;
  this.plants = [];
  this.manageCurrentZones = function (aNum) {
    this.currentHardinessZones = aNum;
    console.log(this.currentHardinessZones);
    this.findPlants(this.currentHardinessZones, this.finalOtherArrayOuter, this.finalMedicalArrayOuter, this.edibleSelected);
  };
  this.medicalSelected = [];
  this.manageMedicalSelected = function (use) {
    var found = false;
    for (var i = 0; i < this.medicalSelected.length; i++) {
      if (this.medicalSelected[i] === use) {
        found = true;
        this.medicalSelected.splice(i, 1);
      }
    }
    if (!found) {
      this.medicalSelected.push(use);
    }
  };
  this.edibleSelected = [];
  this.manageEdibleSelect = function (use) {
    var found = false;
    for (var i = 0; i < this.edibleSelected.length; i++) {
      if (this.edibleSelected[i] === use) {
        found = true;
        this.edibleSelected.splice(i, 1);
        console.log(this.edibleSelected);
        this.findPlants(this.currentHardinessZones, this.finalOtherArrayOuter, this.finalMedicalArrayOuter, this.edibleSelected);
      }
    }
    if (!found) {
      console.log(this.edibleSelected);
      this.edibleSelected.push(use);
      this.findPlants(this.currentHardinessZones, this.finalOtherArrayOuter, this.finalMedicalArrayOuter, this.edibleSelected);
    }
  };
  this.otherSelected = [];
  this.manageOtherSelect = function (use) {
    var found = false;
    for (var i = 0; i < this.otherSelected.length; i++) {
      if (this.otherSelected[i] === use) {
        found = true;
        this.otherSelected.splice(i, 1);
      }
    }
    if (!found) {
      this.otherSelected.push(use);
    }
  };

  this.findPlants = function (z, o, m, e) {
    console.log('ON MY WAY');
    console.log(z, o, m, e);
    return $http({
      method: 'PUT',
      url: '/plants',
      data: { zone: z, other: o, medical: m, edible: e }
    }).then(function (response) {
      console.log(response.data);
      //need to push to this.plants
    });
  };

  this.finalMedicalArrayOuter = [];
  this.addMedicalSpecific = function () {
    this.finalMedicalArray = [];
    this.finalMedicalArrayOuter = this.finalMedicalArray;

    var alternativeMed = ['Alternative', 'Aromatherapy', 'Bach', 'Homeopathy'];
    var bacteria = ['Anthelmintic', 'Antibacterial', 'Antibiotic', 'Antifungal', 'Antiviral', 'Parasiticide', 'Vermifuge', 'Warts'];
    var bites = ['Antidote', 'Stings'];
    var bones = ['Antiarthritic', 'Antiinflammatory', 'Antirheumatic'];
    var bowels = ['Antihaemorrhoidal', 'Aperient', 'Carminative', 'Cathartic', 'Hydrogogue', 'Laxative', 'Purgative'];
    var cancer = ['Antitumor', 'Cancer', 'Cytostatic', 'Cytotoxic', 'Resolvent'];
    var chest = ['Antiasthmatic', 'Antitussive', 'Decongestant', 'Demulcent', 'Expectorant', 'Pectoral'];
    var ear = ['Errhine', 'Mouthwash', 'Mydriatic', 'Odontalgic', 'Ophthalmic', 'Sialagogue', 'Sternutatory'];
    var fevers = ['Antipyretic', 'Febrifuge'];
    var general = ['Antiscorbutic', 'Balsamic', 'Nutritive', 'Tonic'];
    var heart = ['Anticholesterolemic', 'Anticoagulant', 'Blood purifier', 'Blood tonic', 'Cardiac', 'Cardiotonic', 'Haemolytic', 'Hypoglycaemic', 'Hypotensive', 'Vasoconstrictor', 'Vasodilator'];
    var infectious = ['Antiperiodic', 'Antiscrophulatic', 'TB', 'VD'];
    var liver = ['Antibilious', 'Cholagogue', 'Diuretic', 'Haemostatic', 'Hepatic', 'Kidney', 'Lithontripic'];
    var nerves = ['Antispasmodic', 'Nervine'];
    var otherMed = ['Antidandruff', 'Antihydrotic', 'Antiphlogistic', 'Antivinous', 'Appetizer', 'Aromatic', 'Astringent', 'Bitter', 'Deodorant', 'Diaphoretic', 'Emollient', 'Enuresis', 'Hallucinogenic', 'Hypnotic', 'Irritant', 'Miscellany', 'Refrigerant', 'Restorative', 'Rubefacient', 'Sedative', 'Stimulant'];
    var pain = ['Anaesthetic', 'Analgesic', 'Anodyne', 'Lenitive', 'Narcotic'];
    var sex = ['Abortifacient', 'Anaphrodisiac', 'Aphrodisiac', 'Birthing aid', 'Contraceptive', 'Emmenagogue', 'Galactofuge', 'Galactogogue', 'Infertility', 'Oxytoxic', 'Uterine tonic', "Women's complaints"];
    var skin = ['Acrid', 'Antidermatosic', 'Antipruritic', 'Foot care', 'Skin', 'Vesicant'];
    var stomach = ['Antacid', 'Antiemetic', 'Digestive', 'Emetic', 'Stomachic'];
    var wounds = ['Antiecchymotic', 'Antiseptic', 'Detergent', 'Disinfectant', 'Plaster', 'Poultice', 'Salve', 'Styptic', 'Vulnerary'];
    var wholeBody = ['Adaptogen', 'Deobstruent', 'Depurative'];

    for (var i = 0; i < this.medicalSelected.length; i++) {
      if (this.medicalSelected[i] === "Alternative Medicine") {
        for (var j = 0; j < alternativeMed.length; j++) {
          this.finalMedicalArray.push(alternativeMed[j]);
        }
      }
      if (this.medicalSelected[i] === "Bacteria/Viruses/Fungi/Parasites") {
        for (var j = 0; j < bacteria.length; j++) {
          this.finalMedicalArray.push(bacteria[j]);
        }
      }
      if (this.medicalSelected[i] === "Bites/Stings") {
        for (var j = 0; j < bites.length; j++) {
          this.finalMedicalArray.push(bites[j]);
        }
      }
      if (this.medicalSelected[i] === "Bones") {
        for (var j = 0; j < bones.length; j++) {
          this.finalMedicalArray.push(bones[j]);
        }
      }
      if (this.medicalSelected[i] === "Bowels/Bladder") {
        for (var j = 0; j < bowels.length; j++) {
          this.finalMedicalArray.push(bowels[j]);
        }
      }
      if (this.medicalSelected[i] === "Cancer") {
        for (var j = 0; j < cancer.length; j++) {
          this.finalMedicalArray.push(cancer[j]);
        }
      }
      if (this.medicalSelected[i] === "Chest/Lungs") {
        for (var j = 0; j < chest.length; j++) {
          this.finalMedicalArray.push(chest[j]);
        }
      }
      if (this.medicalSelected[i] === "Ear/Nose/Throat/Eyes") {
        for (var j = 0; j < ear.length; j++) {
          this.finalMedicalArray.push(ear[j]);
        }
      }
      if (this.medicalSelected[i] === "Fevers") {
        for (var j = 0; j < fevers.length; j++) {
          this.finalMedicalArray.push(fevers[j]);
        }
      }
      if (this.medicalSelected[i] === "General Well Being") {
        for (var j = 0; j < general.length; j++) {
          this.finalMedicalArray.push(general[j]);
        }
      }
      if (this.medicalSelected[i] === "Heart/Blood") {
        for (var j = 0; j < heart.length; j++) {
          this.finalMedicalArray.push(heart[j]);
        }
      }
      if (this.medicalSelected[i] === "Infectious Diseases") {
        for (var j = 0; j < infectious.length; j++) {
          this.finalMedicalArray.push(infectious[j]);
        }
      }
      if (this.medicalSelected[i] === "Liver/Kidneys") {
        for (var j = 0; j < liver.length; j++) {
          this.finalMedicalArray.push(liver[j]);
        }
      }
      if (this.medicalSelected[i] === "Nerves/Muscles") {
        for (var j = 0; j < nerves.length; j++) {
          this.finalMedicalArray.push(nerves[j]);
        }
      }
      if (this.medicalSelected[i] === "Other") {
        for (var j = 0; j < otherMed.length; j++) {
          this.finalMedicalArray.push(otherMed[j]);
        }
      }
      if (this.medicalSelected[i] === "Pain Relief") {
        for (var j = 0; j < pain.length; j++) {
          this.finalMedicalArray.push(pain[j]);
        }
      }
      if (this.medicalSelected[i] === "Sex/Reproduction") {
        for (var j = 0; j < sex.length; j++) {
          this.finalMedicalArray.push(sex[j]);
        }
      }
      if (this.medicalSelected[i] === "Skin/Hands/Feet") {
        for (var j = 0; j < skin.length; j++) {
          this.finalMedicalArray.push(skin[j]);
        }
      }
      if (this.medicalSelected[i] === "Stomach") {
        for (var j = 0; j < stomach.length; j++) {
          this.finalMedicalArray.push(stomach[j]);
        }
      }
      if (this.medicalSelected[i] === "Wounds/Bruises") {
        for (var j = 0; j < wounds.length; j++) {
          this.finalMedicalArray.push(wounds[j]);
        }
      }
      if (this.medicalSelected[i] === "Whole Body") {
        for (var j = 0; j < wholeBody.length; j++) {
          this.finalMedicalArray.push(wholeBody[j]);
        }
      }
    }
    //console.log('Line 201 ' + this.finalMedicalArray);
    //console.log('OUTER' + this.finalMedicalArrayOuter);
    this.findPlants(this.currentHardinessZones, this.finalOtherArrayOuter, this.finalMedicalArrayOuter, this.edibleSelected);
    return this.finalMedicalArray;
  };

  this.finalOtherArrayOuter = [];
  this.addOtherSpecific = function () {
    this.finalOtherArray = [];
    this.finalOtherArrayOuter = this.finalOtherArray;

    var building = ['Insulation', 'Pipes', 'Pitch', 'Plaster', 'Roofing', 'Thatching'];
    var clothing = ['Buttons', 'Darning ball', 'Fibre', 'Latex', 'Leather', 'Needles', 'Pins', 'Raffia', 'Starch', 'Stuffing', 'Tannin', 'Weaving'];
    var dyes = ['Blotting paper', 'Dye', 'Ink', 'Mordant', 'Paint', 'Paper', 'Pencil', 'Size'];
    var fertilizer = ['Compost', 'Fertilizer', 'Green manure', 'Liquid feed', 'Potash'];
    var fire = ['Alcohol', 'Biomass', 'Charcoal', 'Friction sticks', 'Fuel', 'Kindling', 'Lighting', 'Oil', 'Tinder', 'Wax', 'Wick'];
    var bathroom = ['Baby care', 'Cleanser', 'Cosmetic', 'Cotton wool', 'Deodorant', 'Disinfectant', 'Essential', 'Hair', 'Resin', 'Soap', 'Soap making', 'Teeth'];
    var garden = ['Fencing', 'Fire retardant', 'Hedge', 'Mulch', 'Pioneer', 'Plant breeding', 'Plant support', 'Rooting hormone', 'Rootstock', 'Shelterbelt', 'Soil conditioner', 'Soil reclamation', 'Soil stabilization'];
    var home = ['Bedding', 'Besom', 'Brush', 'Incense', 'Lining', 'Packing', 'Porcelain', 'Pot-pourri', 'Scourer', 'Strewing', 'String'];
    var kitchen = ['Bottles', 'Containers', 'Cork', 'Filter', 'Fruit ripening', 'Gum', 'Pectin', 'Straw', 'Waxed paper'];
    var other = ['Broom', 'Litmus', 'Microscope', 'Miscellany', 'Musical', 'Pollution', 'Repellent', 'Weather forecasting', 'Weather protection'];
    var pesticides = ['Fungicide', 'Herbicide', 'Insecticide', 'Parasiticide'];
    var woodwork = ['Adhesive', 'Basketry', 'Beads', 'Furniture', 'Lacquer', 'Nails', 'Polish', 'Preservative', 'Rust', 'Sandpaper', 'Varnish', 'Waterproofing', 'Wood'];

    for (var i = 0; i < this.otherSelected.length; i++) {
      if (this.otherSelected[i] === "Building") {
        for (var j = 0; j < building.length; j++) {
          this.finalOtherArray.push(building[j]);
        }
      }
      if (this.otherSelected[i] === "Clothing") {
        for (var j = 0; j < clothing.length; j++) {
          this.finalOtherArray.push(clothing[j]);
        }
      }
      if (this.otherSelected[i] === "Dyes/Paints/Ink/Paper") {
        for (var j = 0; j < dyes.length; j++) {
          this.finalOtherArray.push(dyes[j]);
        }
      }
      if (this.otherSelected[i] === "Fertilizers") {
        for (var j = 0; j < fertilizer.length; j++) {
          this.finalOtherArray.push(fertilizer[j]);
        }
      }
      if (this.otherSelected[i] === "Fire/Lighting") {
        for (var j = 0; j < fire.length; j++) {
          this.finalOtherArray.push(fire[j]);
        }
      }
      if (this.otherSelected[i] === "Bathroom") {
        for (var j = 0; j < bathroom.length; j++) {
          this.finalOtherArray.push(bathroom[j]);
        }
      }
      if (this.otherSelected[i] === "Garden") {
        for (var j = 0; j < garden.length; j++) {
          this.finalOtherArray.push(garden[j]);
        }
      }
      if (this.otherSelected[i] === "Home") {
        for (var j = 0; j < home.length; j++) {
          this.finalOtherArray.push(home[j]);
        }
      }
      if (this.otherSelected[i] === "Kitchen") {
        for (var j = 0; j < kitchen.length; j++) {
          this.finalOtherArray.push(kitchen[j]);
        }
      }
      if (this.otherSelected[i] === "Other") {
        for (var j = 0; j < other.length; j++) {
          this.finalOtherArray.push(other[j]);
        }
      }
      if (this.otherSelected[i] === "Pesticides") {
        for (var j = 0; j < pesticides.length; j++) {
          this.finalOtherArray.push(pesticides[j]);
        }
      }
      if (this.otherSelected[i] === "Woodwork/Crafts") {
        for (var j = 0; j < woodwork.length; j++) {
          this.finalOtherArray.push(woodwork[j]);
        }
      }
    }
    //console.log('Line 209 ' + this.finalOtherArray);
    //console.log('OUTER OTHER' + this.finalOtherArrayOuter)
    this.findPlants(this.currentHardinessZones, this.finalOtherArrayOuter, this.finalMedicalArrayOuter, this.edibleSelected);
    return this.finalOtherArray;
  };

  //FOUR ARRAYS WE NEED TO SEND TO BACKEND
  //finalMedicalArray
  //finalOtherArray
  //edibleSelected
  //currentHardinessZones
});